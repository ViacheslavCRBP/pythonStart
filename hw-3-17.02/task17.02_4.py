# Задание 4:
# Программа принимает
# действительное положительное число x и целое отрицательное число y.
# Выполните возведение числа x в степень y.
# Задание реализуйте в виде функции my_func(x, y).
# При решении задания нужно обойтись без встроенной функции возведения числа в степень.
# Подсказка: попробуйте решить задачу двумя способами.
# Первый — возведение в степень с помощью оператора **.
# Второй — более сложная реализация без оператора **,
# предусматривающая использование цикла.


# Программа принимает действительное положительное число x
# и целое отрицательное число y в пределах диапазона, заданного пользователем:
import random
n = int(input('Введите мак. значение для границ диапазона выбора чисел (X,Y): '))
x = float(random.randint(1, n))
y = - (random.randint(1, n))
print('Программа выбрала следующие значения:', 'X =', x, ';  Y =', y)

# Вариант 1: создаем функцию для расчета с помощью оператора ** :
def degree_func(n_1, n_2):
    return n_1 ** n_2
degree = degree_func(x, y)
text = 'Считаем по Варианту 1: X**Y = {}'.format(degree)
print(text)

# Вариант 2: создаем функцию для расчета с помощью оператора ** :
def degree_func(n_1, n_2):
    return n_1 ** n_2
print('Считаем по Варианту 2: X**Y =', degree_func(x, y))

# Вариант 3: используем готовую функцию pow (для проверки):
print('Считаем по Варианту 3: X**Y =', pow(x, y))

# Вариант 4: создаем функцию для расчета через цикл:
def degree_func(n_1, n_2):
    cycle_y = 1
    for i in range(n_2 * -1):
        cycle_y /= n_1
        return cycle_y
print('Считаем по Варианту 4: X**Y =', degree_func(x, y))

# Вариант 5: создаем функцию для расчета через цикл:
def degree_func(n_1, n_2):
    cycle_y = 1
    while cycle_y <= (- n_2):
        cycle_y += 1
    return 1 / (n_1)
print('Считаем по Варианту 5: X**Y =', degree_func(x, y))

# Вроде бы всё верно при циклах через while и через for,
# но при цикличном расчете получается иной результат.
# Так и не понял причину...