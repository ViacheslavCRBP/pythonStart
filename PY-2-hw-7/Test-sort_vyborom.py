#  Сортировка выбором:
#  сложность алгоритма - О(n**2) "О от n в квадрате"
#  стабильность: устойчивая или неустойчивая (в примере ниже - устойчивая)
#  #  (два одинаковых элемента сохранят порядок относительно друг друга)
#  Тип (категория): выбором
#  Потребление памяти: не требуется доп.память.

#  Алгоритм сортировки выбором:
#  найти наименьший элемент в неотсортированной части
#  Поменять его местами с первым елементом в неотсортированной части
#  продолжать, пока весь массив не будет отсортирован.


import random

size = 10
array = [i for i in range(size)]
random.shuffle(array)  # метод shuffle() перемешал значения в array
print(array)
print('*' * 50)


def selection_sort(array):
    for i in range(len(array)):
        idx_min = i  # это та самая перемнная,
        # которая требует допол.памяти 28 байт
        for j in range(i + 1, len(array)):  # J нужна для того,
            # чтобы идти по неотсортированной части массива
            if array[j] < array[idx_min]:
                idx_min = j

        array[idx_min], array[i] = array[i], array[idx_min]
        print(array)

#  return не нужен, т.к. мы отсортировали массив в самом массиве
selection_sort(array)
print(array)
