# Сортировка пузырьком

#  сложность алгоритма - О(n**2) "О от n в квадрате"
#  стабильность: устойчивая (два одинаковых
#  элемента сохранят порядок относительно друг друга)
#  Тип (категория): ОБМЕННАЯ
#  Потребление памяти: не требуется доп.память.

#  Алгоритм
#  по очереди все проверяем,
#  выбирает самый большой и относит его в конец

import random

size = 10
array = [i for i in range(size)]
random.shuffle(array)   # метод shuffle() перемешал значения в array
print(array)
print('*' * 50)

n = 1  # счетчик витков сортировки
while n < len(array):   # сортировка пока n меньше длины массива
    for i in range(len(array) - n):  #  i пройдет по всем значениям
        if array[i] > array[i + 1]:   # если верно, то меняем местами
            array[i], array[i + 1] = array[i + 1], array[i]
    n += 1  # самое большое число окажется в конце, и
#    внутренний цикл будет делать на одну проверку меньше
#    всплывшие пузырьки мы повторно не проверяем
    print(array)  # на каждом витке делается сортировка
    #       на n проходов по внешнему циклу понадобилось n проходов по внутреннему
    #     циклу. Значит, сложность алгоритма - О(n**2) "О от n в квадрате"


